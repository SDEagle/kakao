require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UsersController do

  before :each do
    @user = create :user
  end

  def some_attributes
    { :name => 'Marvin' }
  end

  it 'should not be accessible if not logged in' do
    get :show, { id: 1 }
    response.should redirect_to(new_user_session_path)
    get :edit, { id: 1 }
    response.should redirect_to(new_user_session_path)
    patch :update, { id: 1 }
    response.should redirect_to(new_user_session_path)
  end

  describe 'GET index' do
    it 'assigns all users as @users' do
      get :index
      assigns(:users).should == [@user]
    end
  end

  describe 'GET show' do
    it 'assigns the requested user as @user' do
      sign_in @user
      get :show, { id: @user.to_param }
      assigns(:user).should == @user
    end
  end

  describe 'GET edit' do
    it 'assigns the requested user as @user' do
      sign_in @user
      get :edit, { id: @user.to_param }
      assigns(:user).should == @user
    end

    it 'assigns the current user' do
      user = create :user
      sign_in @user
      get :edit, { id: user.to_param }
      assigns(:user).should == @user
    end
  end

  describe 'PUT update' do
    describe 'with valid params' do
      it 'updates the requested user' do
        sign_in @user
        User.any_instance.should_receive(:update).with({ 'name' => 'MyString'})
        put :update, {:id => @user.to_param, :user => { name: 'MyString'}}
      end

      it 'redirects to the user' do
        sign_in @user
        put :update, { :id => @user.to_param, :user => some_attributes }
        response.should redirect_to(@user)
      end

      it 'denies update for user other than current' do
        user = create :user
        sign_in @user
        put :update, {:id => user.to_param, :user => some_attributes}
        response.should redirect_to(edit_user_path @user)
        flash[:error].should be_present
      end
    end

    describe 'with invalid params' do
      it "re-renders the 'edit' template" do
        sign_in @user
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        put :update, {:id => @user.to_param, :user => { name: 'invalid value'}}
        response.should render_template('edit')
      end
    end
  end
end
